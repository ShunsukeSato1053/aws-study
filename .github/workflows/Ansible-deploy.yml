name: Deploy via Ansible over SSM (完全再構築)

on:
  workflow_dispatch: # 手動実行トリガー（Run workflow ボタンで実行）

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. リポジトリをチェックアウト
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      # 2. AWS 認証情報を設定（Terraform・Ansible の両方で使用）
      - name: AWS 認証情報を設定
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # 3. Terraform のインストール
      - name: Terraform をセットアップ
        uses: hashicorp/setup-terraform@v3

      # 4. Terraform の初期化
      - name: Terraform Init
        run: terraform -chdir=tfpractice init

      # 5. 既存環境を削除（destroy）
      #    既存の ALB や IAM ロールの衝突を防ぐため、環境を一度完全削除する
      - name: Terraform Destroy
        run: terraform -chdir=tfpractice destroy -auto-approve  -var="allowedCIDRs=129.227.238.198/32" || true

      # 6. 新しい環境を構築（apply）
      #    今回は特定の IP アドレスからのアクセスを許可
      - name: Terraform Apply
        run: terraform -chdir=tfpractice apply -auto-approve -var="allowedCIDRs=129.227.238.198/32"

      # 7. AWS CLI と Ansible をインストール
      #    boto3 / botocore / awscli → AWS SDK や CLI
      #    amazon.aws / community.aws → Ansible の AWS モジュール
      - name: AWS CLI & Ansible をインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install ansible boto3 botocore awscli
          ansible-galaxy collection install amazon.aws community.aws

      # 8. Terraform output から EC2 インスタンス ID を取得
      #    後続の Ansible 実行で使用するため環境変数にセット
      - name: EC2 インスタンス ID を取得
        run: |
          INSTANCE_ID=$(terraform -chdir=tfpractice output -raw githubactions_ec2_instance_id)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      # 9. Ansible インベントリファイルを作成
      #    SSM 接続を使用して EC2 にアクセスするための設定
      - name: Ansible インベントリを作成
        run: |
          echo "[web]" > inventory.ini
          echo "ssm-ec2 ansible_host=${INSTANCE_ID} ansible_connection=amazon.aws.aws_ssm ansible_region=ap-northeast-1" >> inventory.ini

      # 10. Ansible Playbook を実行
      #     playbook.yml 内のタスクを SSM 経由で EC2 に適用（例：Java インストール）
      - name: Ansible Playbook を実行（SSM経由）
        run: ansible-playbook -i inventory.ini ansible/playbook.yml
