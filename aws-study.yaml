AWSTemplateFormatVersion: 2010-09-09
Description: aws-study template

Parameters: 

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"

  AllowedCIDRs:
    Type: String
    Description: "許可するCIDRブロック（例: 203.0.113.0/24 または 198.51.100.25/32）"
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[12][0-9]|3[0-2]))$"
    ConstraintDescription: "有効なCIDR形式で入力してください。"

  version:
    Type: String
    Description: "Versionのみを変更できるようにする"

Resources:

  # VPCの作成
  awsvpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default

  # IGWの作成
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  # IGWの接続設定
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref awsvpc
      InternetGatewayId: !Ref MyInternetGateway
  
  # パブリックサブネット1aの作成
  PublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsvpc
      CidrBlock: 10.0.0.0/20
      AvailabilityZone: ap-northeast-1a

  # パブリックサブネット1cの作成
  PublicSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsvpc
      CidrBlock: 10.0.16.0/20
      AvailabilityZone: ap-northeast-1c

  # プライベートサブネット1aの作成
  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsvpc
      CidrBlock: 10.0.128.0/20
      AvailabilityZone: ap-northeast-1a

  # プライベートサブネット1cの作成
  PrivateSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref awsvpc
      CidrBlock: 10.0.144.0/20
      AvailabilityZone: ap-northeast-1c

  # パブリックルートテーブルの作成
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref awsvpc

  # パブリックルートの設定
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

   # パブリックサブネット1aをルートテーブルに関連付け
  PublicRouteTableAssociation1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1a
      RouteTableId: !Ref PublicRouteTable

  # パブリックサブネット1cをルートテーブルに関連付け
  PublicRouteTableAssociation1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1c
      RouteTableId: !Ref PublicRouteTable

  # vpcエンドポイントの作成（ゲートウェイ型）
  VPCS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTable1a #プライベートルートテーブル1aの指定
        - !Ref PrivateRouteTable1c #プライベートルートテーブル1cの指定
      VpcId: !Ref awsvpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3  # S3のVPCエンドポイントを指定
      VpcEndpointType: Gateway # ゲートウェイ型の指定

  # プライベートルートテーブル1aの作成
  PrivateRouteTable1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref awsvpc
  
  # プライベートサブネット1aをルートテーブルに関連付け
  PrivateRouteTableAssociation1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1a
      RouteTableId: !Ref PrivateRouteTable1a

    # プライベートルートテーブル1cの作成
  PrivateRouteTable1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref awsvpc
  
  # プライベートサブネット1cをルートテーブルに関連付け
  PrivateRouteTableAssociation1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1c
      RouteTableId: !Ref PrivateRouteTable1c

  # セキュリティグループの作成（EC2用）
  awsstudyec2InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ec2"
      VpcId: !Ref awsvpc
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedCIDRs # 例：0.0.0.0/32
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref awsstudyALBSG
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  # EC2の作成
  awsstudyec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-027fff96cc515f7bc
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PublicSubnet1a
          AssociatePublicIpAddress: true
          GroupSet:
          - !Ref awsstudyec2InstanceSG

    # セキュリティグループの作成（RDS用）
  awsstudyrdsInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for rds"
      VpcId: !Ref awsvpc
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref awsstudyec2InstanceSG
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DB subnet group for RDS"
      SubnetIds:
        - !Ref PrivateSubnet1a
        - !Ref PrivateSubnet1c
      DBSubnetGroupName: awsstudy-db-subnet-group

  # RDSの作成
  DBInstance: 
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: MySQL
      EngineVersion: 8.0.39
      MultiAZ: false
      DBInstanceIdentifier: cloudformationrds
      MasterUsername: root
      MasterUserPassword: !Sub '{{resolve:ssm-secure:/rds/masteruserpassword:${version}}}'
      DBInstanceClass: db.t4g.micro
      StorageType: gp2
      AllocatedStorage: 20
      VPCSecurityGroups: 
        - !Ref awsstudyrdsInstanceSG
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      DBName: awsstudy
      EnableCloudwatchLogsExports:
        - audit
        - error
        - general
        - slowquery

  # ALBリスナー（ALBのトラフィックを制御するもの。今回は80番ポートでアクセスがあった場合）
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref TargetGroup
        LoadBalancerArn: !Ref awsstudyALB
        Port: 80
        Protocol: HTTP

  # ALB（トラフィックの受け口）
  awsstudyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
        Name: awsstudyalb
        Scheme: "internet-facing"
        Type: "application"
        IpAddressType: ipv4
        Subnets:
            - !Ref PublicSubnet1a
            - !Ref PublicSubnet1c
        SecurityGroups:
            - !Ref awsstudyALBSG

   # セキュリティグループの作成（ALB用）
  awsstudyALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for alb"
      VpcId: !Ref awsvpc
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0


  # ターゲットグループ（トラフィックの転送先を決めるもの）
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Name: awsstudytg
      Protocol: HTTP
      Port: 80
      VpcId: !Ref awsvpc
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: 200,300,301
      Targets:
        - Id: !Ref awsstudyec2Instance
          Port: 8080
